{"_id":"pbkdf2-password","_rev":"710008","name":"pbkdf2-password","description":"Easy salt/password creation for Node.js, extracted from Mosca","dist-tags":{"latest":"1.0.0"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"time":{"modified":"2015-01-29T15:19:33.000Z","created":"2015-01-29T15:19:24.238Z","1.0.0":"2015-01-29T15:19:24.238Z"},"users":{},"author":{"name":"Matteo Collina","email":"hello@matteocollina.com"},"repository":{"type":"git","url":"https://github.com/mcollina/pbkdf2-password.git"},"versions":{"1.0.0":{"name":"pbkdf2-password","version":"1.0.0","description":"Easy salt/password creation for Node.js, extracted from Mosca","main":"pbkdf2-password.js","scripts":{"test":"mocha test.js"},"repository":{"type":"git","url":"https://github.com/mcollina/pbkdf2-password.git"},"keywords":["pbkdf2","authentication"],"author":{"name":"Matteo Collina","email":"hello@matteocollina.com"},"license":"MIT","bugs":{"url":"https://github.com/mcollina/pbkdf2-password/issues"},"homepage":"https://github.com/mcollina/pbkdf2-password","devDependencies":{"chai":"^1.10.0","mocha":"^2.1.0"},"dependencies":{"async":"^0.9.0"},"gitHead":"7ae16e5544590aeb72de6b713de3df38cae5b33f","_id":"pbkdf2-password@1.0.0","_shasum":"3edb0017dac555c9068627140537abaa5e731a82","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"}],"dist":{"shasum":"3edb0017dac555c9068627140537abaa5e731a82","size":3229,"noattachment":false,"tarball":"http://registry.npm.taobao.org/pbkdf2-password/download/pbkdf2-password-1.0.0.tgz"},"directories":{},"publish_time":1422544764238,"_cnpm_publish_time":1422544764238}},"readme":"# pbkdf2-password\n\nEasy salt/password creation for Node.js, extracted from\n[Mosca](http://npm.im/mosca).\n\nUsage\n-----\n\n```js\nvar bkfd2Password = require(\"pbkdf2-password\");\nvar hasher = bkfd2Password();\nvar assert = require(\"assert\");\nvar opts = {\n  password: \"helloworld\"\n};\n\nhasher(opts, function(err, pass, salt, hash) {\n  opts.salt = salt;\n  hasher(opts, function(err, pass, salt, hash2) {\n    assert.deepEqual(hash2, hash);\n\n    // password mismatch\n    opts.password = \"aaa\";\n    hasher(opts, function(err, pass, salt, hash2) {\n      assert.notDeepEqual(hash2, hash);\n      console.log(\"OK\");\n    });\n  });\n});\n```\n\nAPI\n---\n\n* <a href=\"#build\"><code>bkfd2Password<b></b></code></a>\n* <a href=\"#hasher\"><code><b>hasher()</b></code></a>\n\n<a name=\"build\">\n### bkfd2Password(options)\n\nCreates a new [hasher](#hasher) functions, with the specified options.\n\nOptions:\n\n * `saltLength`, the length of the random salt\n * `iterations`, number of pbkdf2 iterations\n * `keyLength`, the length of the generated keys\n\n<a name=\"hasher\">\n### hasher(opts, function(err, pass, salt, hash))\n\nHash a password, using a hash and the pbkd2\ncrypto module.\n\nOptions:\n - `password`, the password to hash.\n - `salt`, the salt to use, as a base64 string.\n\nIf the `password` is left undefined, a new\n10-bytes password will be generated, and converted\nto base64.\n\nIf the `salt` is left undefined, a new salt is generated.\n\nThe callback will be called with the following arguments:\n - the error, if something when wrong.\n - the password.\n - the salt, encoded in base64.\n - the hash, encoded in base64.\n\nLicense\n-------\n\nMIT\n","_attachments":{},"homepage":"https://github.com/mcollina/pbkdf2-password","bugs":{"url":"https://github.com/mcollina/pbkdf2-password/issues"},"license":"MIT","_etag":"\"1422544773000\""}